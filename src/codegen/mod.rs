use asm::{Assembly, Instruction::*};

use crate::checker::{CheckedExpression, CheckedExpressionData, CheckedProgram};

mod asm;

pub struct Codegen {
    sections: Sections,
    is_main: bool,
}

struct Sections {
    top: Assembly,
    text: Assembly,
}

impl Codegen {
    pub fn new() -> Self {
        Self {
            sections: Sections {
                top: Assembly(vec![]),
                text: Assembly(vec![]),
            },
            is_main: false,
        }
    }

    pub fn codegen(&mut self, checked_program: &CheckedProgram) -> String {
        self.sections
            .top
            .push(Comment(format!("Generated by Lovely {}", crate::VERSION)));
        self.sections.top.push(Newline);

        for expr in &checked_program.exprs {
            self.codegen_expression(expr);
        }

        self.sections.top.push(Newline);
        self.sections.top.append(&mut self.sections.text);
        self.sections.top.to_x86_64_linux()
    }

    fn codegen_expression(&mut self, expr: &CheckedExpression) {
        match &expr.data {
            CheckedExpressionData::Unit => todo!("units"),
            CheckedExpressionData::BoolLiteral(_) => todo!("bool literals"),
            CheckedExpressionData::IntLiteral(_) => todo!("int literals"),
            CheckedExpressionData::Ident { .. } => todo!("idents"),
            CheckedExpressionData::Block(_) => todo!("blocks"),
            CheckedExpressionData::Prefix { .. } => todo!("prefix"),
            CheckedExpressionData::Infix { .. } => todo!("infix"),
            CheckedExpressionData::VariableDecl { name, value, .. } => match value.data {
                CheckedExpressionData::Function { .. } if name == "main" => {
                    self.is_main = true;
                    self.codegen_expression(value);
                }
                _ => todo!("other functions"),
            },
            CheckedExpressionData::Function {
                parameters,
                return_type,
                body,
            } => {
                if self.is_main {
                    self.sections.top.push(Label("global _start".to_string()));
                    self.sections
                        .text
                        .push(Comment("main function:".to_string()));
                    self.sections.text.push(Label("_start".to_string()));
                }
            }
            CheckedExpressionData::FunctionCall { .. } => todo!("function calls"),
        };
    }
}
